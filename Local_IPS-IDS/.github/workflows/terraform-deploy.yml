name:  (Temporaryly Disavbled)Terraform Deploy to PaaS

on:
  # 此 workflow 已停用（僅用於 main 分支的雲端部署）
  # dev 分支使用地端部署，不需要 Terraform
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure Terraform Variables
        run: |
          cat > terraform.tfvars <<EOF
          # Auto-generated by GitHub Actions
          environment = "${{ env.TF_VAR_environment }}"
          project_name = "pandora-box-console"
          
          # API Tokens from Secrets
          railway_project_id = "${{ secrets.RAILWAY_PROJECT_ID }}"
          railway_api_token = "${{ secrets.RAILWAY_API_TOKEN }}"
          postgres_password = "${{ secrets.POSTGRES_PASSWORD }}"
          
          render_api_key = "${{ secrets.RENDER_API_KEY }}"
          
          koyeb_api_token = "${{ secrets.KOYEB_API_TOKEN }}"
          koyeb_organization_id = "${{ secrets.KOYEB_ORG_ID }}"
          
          patr_api_token = "${{ secrets.PATR_API_TOKEN }}"
          
          fly_api_token = "${{ secrets.FLY_API_TOKEN }}"
          fly_organization = "personal"
          fly_region = "nrt"
          
          grafana_admin_password = "${{ secrets.GRAFANA_PASSWORD }}"
          monitoring_volume_size = 10
          log_level = "info"
          
          agent_image = "ghcr.io/${{ github.repository_owner }}/pandora-agent:latest"
          ui_image = "ghcr.io/${{ github.repository_owner }}/axiom-ui:latest"
          monitoring_image = "registry.fly.io/pandora-monitoring:latest"
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: |
          github.ref == 'refs/heads/main' || 
          github.ref == 'refs/heads/dev' || 
          github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Output
        if: |
          github.ref == 'refs/heads/main' || 
          github.ref == 'refs/heads/dev' || 
          github.event_name == 'workflow_dispatch'
        id: output
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform State
        if: |
          github.ref == 'refs/heads/main' || 
          github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ env.TF_VAR_environment }}
          path: terraform/terraform.tfstate
          retention-days: 30

