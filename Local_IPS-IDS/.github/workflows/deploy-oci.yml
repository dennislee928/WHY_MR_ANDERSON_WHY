name:  (Temporaryly Disavbled)Deploy to OCI

on:
  # 此 workflow 已停用（僅用於 main 分支的雲端部署）
  # dev 分支使用地端部署，不需要 OCI
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  OCI_REGION: us-ashburn-1
  OCI_NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
  OCI_REGISTRY: ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_NAMESPACE }}

jobs:
  # 建置並推送 Docker 映像到 OCI
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to OCI Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.OCI_REGISTRY }}/pandora-agent
          ${{ env.OCI_REGISTRY }}/pandora-console
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Agent image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/docker/agent.dockerfile
        push: true
        tags: |
          ${{ env.OCI_REGISTRY }}/pandora-agent:${{ github.sha }}
          ${{ env.OCI_REGISTRY }}/pandora-agent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Console image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/docker/server-be.dockerfile
        push: true
        tags: |
          ${{ env.OCI_REGISTRY }}/pandora-console:${{ github.sha }}
          ${{ env.OCI_REGISTRY }}/pandora-console:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到 OCI Kubernetes
  deploy-oci:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up OCI CLI
      run: |
        bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

    - name: Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem
        cat > ~/.oci/config <<EOF
        [DEFAULT]
        user=${{ secrets.OCI_USER }}
        tenancy=${{ secrets.OCI_TENANCY }}
        region=${{ secrets.OCI_REGION }}
        fingerprint=${{ secrets.OCI_FINGERPRINT }}
        key_file=~/.oci/oci_api_key.pem
        EOF

    - name: Configure kubectl for OCI
      run: |
        oci ce cluster create-kubeconfig --cluster-id ${{ secrets.CLUSTER_OCID }} --file ~/.kube/config --region ${{ secrets.OCI_REGION }} --token-version 2.0.0

    - name: Update image tags in manifests
      run: |
        find deployments/kubernetes/base/ -name "*.yaml" -exec sed -i "s|iad.ocir.io/YOUR_NAMESPACE|${{ env.OCI_REGISTRY }}|g" {} \;
        find deployments/kubernetes/base/ -name "*.yaml" -exec sed -i "s|:latest|:${{ github.sha }}|g" {} \;

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -k deployments/kubernetes/base/
        kubectl rollout status deployment/pandora-agent -n pandora-box --timeout=300s
        kubectl rollout status deployment/pandora-console -n pandora-box --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n pandora-box
        kubectl get services -n pandora-box
        kubectl get ingress -n pandora-box

    - name: Health check
      run: |
        echo "等待服務啟動..."
        sleep 30
        kubectl get pods -n pandora-box
        echo "部署完成！"

  # 部署前端到 Vercel (OCI 環境)
  deploy-vercel-oci:
    runs-on: ubuntu-latest
    needs: deploy-oci
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend for OCI
      run: npm run build
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ secrets.VERCEL_API_BASE_URL_OCI }}
        NEXT_PUBLIC_GRAFANA_URL: ${{ secrets.VERCEL_GRAFANA_URL_OCI }}
        NEXT_PUBLIC_PROMETHEUS_URL: ${{ secrets.VERCEL_PROMETHEUS_URL_OCI }}

    - name: Deploy to Vercel (OCI Environment)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_OCI }}
        vercel-args: '--prod'
        working-directory: ./

  # 最終檢查
  final-check:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-oci, deploy-vercel-oci]
    if: always()
    steps:
    - name: OCI Deployment Summary
      run: |
        echo "🎉 OCI 部署完成！"
        echo "- 映像建置: ${{ needs.build-and-push.result }}"
        echo "- OCI 部署: ${{ needs.deploy-oci.result }}"
        echo "- Vercel 部署: ${{ needs.deploy-vercel-oci.result }}"
        echo ""
        echo "🌐 訪問網址:"
        echo "- 前端: https://pandora-oci.yourdomain.com"
        echo "- Grafana: https://pandora-oci.yourdomain.com/grafana"
        echo "- Prometheus: https://pandora-oci.yourdomain.com/prometheus"
